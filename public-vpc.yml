AWSTemplateFormatVersion: '2010-09-09'
Description: A stack creating ec2 instances, alb, vpc
Mappings:
  # Hard values for the subnet masks. These masks define
  # the range of internal IP addresses that can be assigned.
  # The VPC can have all IP's from 10.0.0.0 to 10.0.255.255
  # There are two subnets which cover the ranges:
  #
  # 10.0.0.0 - 10.0.0.255
  # 10.0.1.0 - 10.0.1.255
  #
  # If you need more IP addresses (perhaps you have so many
  # instances that you run out) then you can customize these
  # ranges to add more
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.0.0/24'
    PublicTwo:
      CIDR: '10.0.1.0/24'
Resources:
  # VPC with two public subnets
  # We distribute the subnets across the first two available subnets
  # for the region, for high availability.    
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
  # Two public subnets, where ec2 can have public IP addresses
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true
  # Setup networking resources for the public subnets. Containers
  # in the public subnets have public IP addresses and the routing table
  # sends network traffic via the internet gateway.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable

  # Load balancers for getting traffic to containers.
  # This sample template creates one load balancer:
  #
  # - One public load balancer, hosted in public subnets that is accessible
  #   to the public, and is intended to route traffic to one or more public
  #   facing services.

  # A public facing load balancer, this is used for accepting traffic from the public
  # internet and directing it to public facing microservices
  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
          # Allow access to ALB from anywhere on the internet
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        # The load balancer is placed into the public subnets, so that traffic
        # from the internet can reach the load balancer directly via the internet gateway
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      SecurityGroups: [!Ref 'PublicLoadBalancerSG']
  # A dummy target group is used to setup the ALB to just drop traffic
  # initially, before any real service target groups have been added.
  # DummyTargetGroupPublic:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     HealthCheckIntervalSeconds: 6
  #     HealthCheckPath: /
  #     HealthCheckProtocol: HTTP
  #     HealthCheckTimeoutSeconds: 5
  #     HealthyThresholdCount: 2
  #     Name: !Join ['-', [!Ref 'AWS::StackName', 'drop-1']]
  #     Port: 80
  #     Protocol: HTTP
  #     UnhealthyThresholdCount: 2
  #     VpcId: !Ref 'VPC'
  # PublicLoadBalancerListener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   DependsOn:
  #     - PublicLoadBalancer
  #   Properties:
  #     DefaultActions:
  #       - TargetGroupArn: !Ref 'DummyTargetGroupPublic'
  #         Type: 'forward'
  #     LoadBalancerArn: !Ref 'PublicLoadBalancer'
  #     Port: 80
  #     Protocol: HTTP

  EC2One:
    Type: AWS::EC2::Instance
    Properties: 
      # AvailabilityZone: String
      # BlockDeviceMappings: 
      # - EC2 Block Device Mapping
      # CreditSpecification: CreditSpecification
      # DisableApiTermination: Boolean
      # EbsOptimized: Boolean
      # ElasticGpuSpecifications: [ ElasticGpuSpecification, ... ]
      # ElasticInferenceAccelerators: 
      #   - ElasticInferenceAccelerator
      # HostId: WEB01
      # IamInstanceProfile: String
      ImageId: ami-0080e4c5bc078760e
      # InstanceInitiatedShutdownBehavior: String
      InstanceType: t2.micro
      # Ipv6AddressCount: Integer
      # Ipv6Addresses:
      #   - IPv6 Address Type
      # KernelId: String
      KeyName: web
      # LaunchTemplate: LaunchTemplateSpecification
      # LicenseSpecifications: 
      #   - LicenseSpecification
      # Monitoring: Boolean
      # NetworkInterfaces: 
      #   - EC2 Network Interface
      # PlacementGroupName: String
      # PrivateIpAddress: String
      # RamdiskId: String
      SecurityGroupIds: 
        - !Ref PublicLoadBalancerSG
      # SecurityGroups: 
        # - !Ref PublicLoadBalancerSG
      # SourceDestCheck: Boolean
      # SsmAssociations: 
      #   - SSMAssociation
      SubnetId: !Ref 'PublicSubnetOne'
      Tags: 
        - 
          Key : Project
          Value : CodeAutomation
      # Tenancy: String
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          yum -y update
          yum install -y ruby
          yum install -y aws-cli
          cd /home/ec2-user
          aws --no-sign-request s3 cp s3://aws-codedeploy-us-east-1/latest/install . --region us-east-1
          chmod +x ./install
          ./install auto
      # Volumes: 
      #  - EC2 MountPoint
      #  AdditionalInfo: String

  EC2Two:
    Type: AWS::EC2::Instance
    Properties: 
      # AvailabilityZone: String
      # BlockDeviceMappings: 
      # - EC2 Block Device Mapping
      # CreditSpecification: CreditSpecification
      # DisableApiTermination: Boolean
      # EbsOptimized: Boolean
      # ElasticGpuSpecifications: [ ElasticGpuSpecification, ... ]
      # ElasticInferenceAccelerators: 
      #   - ElasticInferenceAccelerator
      # HostId: String
      # IamInstanceProfile: String
      ImageId: ami-0080e4c5bc078760e
      # InstanceInitiatedShutdownBehavior: String
      InstanceType: t2.micro
      # Ipv6AddressCount: Integer
      # Ipv6Addresses:
      #   - IPv6 Address Type
      # KernelId: String
      KeyName: web
      # LaunchTemplate: LaunchTemplateSpecification
      # LicenseSpecifications: 
      #   - LicenseSpecification
      # Monitoring: Boolean
      # NetworkInterfaces: 
      #   - EC2 Network Interface
      # PlacementGroupName: String
      # PrivateIpAddress: String
      # RamdiskId: String
      SecurityGroupIds: 
        - !Ref PublicLoadBalancerSG
      # SecurityGroups: 
        # - !Ref PublicLoadBalancerSG
      # SourceDestCheck: Boolean
      # SsmAssociations: 
      #   - SSMAssociation
      SubnetId: !Ref 'PublicSubnetTwo'
      Tags: 
        - 
          Key : Project
          Value : CodeAutomation
      # Tenancy: String
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum -y update
          yum install -y ruby
          yum install -y aws-cli
          cd /home/ec2-user
          aws --no-sign-request s3 cp s3://aws-codedeploy-us-east-1/latest/install . --region us-east-1
          chmod +x ./install
          ./install auto
      # Volumes: 
      #  - EC2 MountPoint
      #  AdditionalInfo: String

  ELBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      # HealthCheckPath: String
      # HealthCheckPort: String
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Name: ELBEC2TargetGroup
      Port: 3000
      Protocol: HTTPS
      # Tags:
        # - Resource Tag
      # TargetGroupAttributes:
        # - TargetGroupAttributes
      # Targets:
        # - TargetDescription
      Targets:
        - Id: !Ref 'EC2One'
          Port: 3000
        - Id:
            Ref: EC2Two
          Port: 3000  
      # TargetType: String
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VPC'

  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'ELBTargetGroup'
          Type: 'forward'
      LoadBalancerArn: !Ref 'PublicLoadBalancer'
      Port: 80
      Protocol: HTTP

# These are the values output by the CloudFormation template. Be careful
# about changing any of them, because of them are exported with specific
# names so that the other task related CF templates can use them.
Outputs:
  ExternalUrl:
    Description: The url of the external load balancer
    Value: !Join ['', ['http://', !GetAtt 'PublicLoadBalancer.DNSName']]
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ExternalUrl' ] ]
  PublicListener:
    Description: The ARN of the public load balancer's Listener
    Value: !Ref PublicLoadBalancerListener
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicListener' ] ]
  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'VPC'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'VPCId' ] ]
  PublicSubnetOne:
    Description: Public subnet one
    Value: !Ref 'PublicSubnetOne'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnetOne' ] ]
  PublicSubnetTwo:
    Description: Public subnet two
    Value: !Ref 'PublicSubnetTwo'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnetTwo' ] ]


